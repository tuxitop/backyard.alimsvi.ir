// Generated by CoffeeScript 1.12.2
(function() {
  "use strict";
  var async, fs, markdown_it,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  async = require('async');

  fs = require('fs');

  markdown_it = require('markdown-it');

  module.exports = function(env, callback) {
    var MarkdownItPage;
    MarkdownItPage = (function(superClass) {
      extend(MarkdownItPage, superClass);

      function MarkdownItPage(filepath1, metadata1, markdown1) {
        this.filepath = filepath1;
        this.metadata = metadata1;
        this.markdown = markdown1;
      }

      MarkdownItPage.prototype.getHtml = function(base) {
        var err, highlight_settings, md, name, optName, optVal, opts, plugins, ref, settings;
        if (base == null) {
          base = env.config.baseUrl;
        }
        plugins = env.config['markdown-it'] || {};
        ref = this.metadata['markdown-it'] || {};
        for (name in ref) {
          opts = ref[name];
          plugins[name] = opts;
        }
        settings = plugins['settings'] || void 0;
        md = markdown_it(settings);
        highlight_settings = {};
        for (name in plugins) {
          opts = plugins[name];
          if (name === "highlight-settings") {
            highlight_settings = opts;
          } else if (name !== "settings") {
            env.logger.verbose("using " + name + " plugin with opts " + (JSON.stringify(opts)));
            for (optName in opts) {
              optVal = opts[optName];
              if (optVal.match && optVal.match(/^function\s*\(/)) {
                try {
                  opts[optName] = eval("(" + optVal + ")");
                } catch (error) {
                  err = error;
                  delete opts[optName];
                  env.logger.error("error evaluating " + optName + " option for the " + name + " markdown-it plugin: " + err);
                }
              }
            }
            md.use(require(name), opts || {});
          }
        }
        md.use(require('./highlight'), {
          classPrefix: highlight_settings["class-prefix"] || '',
          autoLanguage: highlight_settings["auto-language"] || false
        });
        md.use(require('./resolve_links')(this, base));
        md.use(require('./resolve_images')(this, base));
        return md.render(this.markdown);
      };

      return MarkdownItPage;

    })(env.plugins.MarkdownPage);
    MarkdownItPage.fromFile = function(filepath, callback) {
      return async.waterfall([
        function(callback) {
          return fs.readFile(filepath.full, callback);
        }, function(buffer, callback) {
          return MarkdownItPage.extractMetadata(buffer.toString(), callback);
        }, (function(_this) {
          return function(result, callback) {
            var markdown, metadata, page;
            markdown = result.markdown, metadata = result.metadata;
            page = new _this(filepath, metadata, markdown);
            return callback(null, page);
          };
        })(this)
      ], callback);
    };
    env.registerContentPlugin('pages', '**/*.*(markdown|mkd|md)', MarkdownItPage);
    return callback();
  };

}).call(this);

//# sourceMappingURL=index.js.map
